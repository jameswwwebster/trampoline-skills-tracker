name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: trampoline-skills

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No tests found"

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "No tests found"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: aws-infrastructure/package-lock.json

    - name: Install CDK dependencies
      run: |
        cd aws-infrastructure
        npm ci

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy infrastructure with CDK
      run: |
        cd aws-infrastructure
        npm run build
        npx cdk deploy --require-approval never

    - name: Update ECS service
      run: |
        # Get cluster and service names from CDK outputs
        CLUSTER_NAME=$(aws cloudformation describe-stacks --stack-name AwsInfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' --output text)
        SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name AwsInfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' --output text)
        
        # Update the service
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment
      run: |
        CLUSTER_NAME=$(aws cloudformation describe-stacks --stack-name AwsInfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' --output text)
        SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name AwsInfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' --output text)
        
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region ${{ env.AWS_REGION }}

    - name: Get application URL
      run: |
        LOAD_BALANCER_DNS=$(aws cloudformation describe-stacks --stack-name AwsInfrastructureStack --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' --output text)
        echo "üåê Application URL: http://$LOAD_BALANCER_DNS"
        echo "üìä Health Check: http://$LOAD_BALANCER_DNS/api/health" 